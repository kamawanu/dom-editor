
  This is all rather experimental, I'm afraid.
  Everything is Copyright University of Southampton (except findrox.py).
  Everything is released under the terms of the GNU GENERAL PUBLIC LICENSE
  (see the file COPYING for details).


Instructions for using Dome:

-> There is a tutorial here:
	http://www.ecs.soton.ac.uk/~tal00r/Dome/tutorial/

The main area shows the XML/HTML document you are editing on the right
and the code to manipulate it on the left. Clicking the right-mouse button
over the main area gets you a popup menu. You can use this, or the keyboard
short-cuts to edit the document.

To move to a node, just click on it. Hold down Ctrl to select multiple
nodes. Double-click a node to collapse/expand it. Shift-click selects
all nodes between the node clicked and the previously selected node.

Most of the menu items are fairly obvious. Here are a few notes though:

- Blank document deletes everything.

- Insert adds a new node just before the current one. Append adds the new
  node just after. Open puts the new node inside.

- 'Shallow' yank/delete only work on the selected nodes themselves, whereas
  the normal yank/delete affect the child nodes too.

- Operations on the root node often can't be undone.

- See www.w3.org for details of the XPath syntax.

- Entering a node makes that node appear to be the root node. You can then
  edit that subtree without worrying about the rest of the document. It's
  faster too, because redrawing lots of stuff is really slow.
  When you're done, use Leave to get back out. Undo will undo all changes
  made between the enter and the leave in one go.

- Select by XPath is really useful for processing lists. Here are some
  useful paths to use:

  - '*' selects all child elements of the current node.
  - 'li' selects all 'li' child nodes.
  - '//a' selects all anchor nodes anywhere in the document.
  - './/a' selects all anchor nodes anywhere inside this node.

  More advanced stuff is also possible, eg:

  - '//text()[ext:match('fred')][2]' selects the second text node containing
    'fred' within each element.

- HTTP GET replaces an anchor node with the HTML document it points to.
  Select the attribute with the URI before using this.
  HTTP POST is similar, but tries to send all non-namespaced attributes
  as POST data, except those with names starting 'header-', which are used
  as extra HTTP headers.

- Don't worry about SOAP messages.

- Substitute works on text nodes. Standard regexp format, eg:
	Replace: .*(\d\d\d\d).*
	   With: \1
  will turn 'Born in 1957, England' into '1957'.

- Python expression lets you do more complex stuff, eg:
  - 'x.split()' splits the text into words.
  - 'int(x) + 1' increments a number.
  - 'x[:-1]' removes the last character.

- The Program menu is described below.

- Don't worry about the Show as ... items.



Once you can edit the document OK, you can start recording operations.
The green area on the left shows the currently selected program ('Root' to
begin with).

To record a sequence:

- Click on the black line below the 'Start' node (a yellow dot appears)

- Click on the Record button on the toolbar. The dot will turn red.

- Perform the operations on the document. Every operation you do will be
  added to the chain.

- Click Record again to stop recording.


To play back the recorded sequence, right-click on 'Root' (just above the
green area) and select Play. The yellow dot moves through the chain as each
operation is performed. The four buttons after Record can be used to stop,
step and resume playing.

You can also use this menu to create new programs. If you want to run a
program once for each selected node, use Map instead of Play.


The Program menu has these, which are only really useful when recording
programs:

- Input pops up a dialog box. Whatever the user enters is placed on the
  clipboard.

- Compare succeeds if all selected nodes have the same value and structure.

- Fail always fails.


Processing a web site:

- Start a new blank document.

- Begin recording the root program.

- Add an attribute 'uri'.

- Edit the value to the URI of the index page. Eg:

	http://www.ibiblio.org/wm/paint/auth/

- Network -> HTTP suck.

- Select the 'ul' element, which contains everything we need.

- Yank it, then Paste Replace the body and delete the unneeded 'head'.

- Select the nodes you want. Eg:

  - Click on the 'ul' element with the list of names.
  - Use Select -> By XPath to select all the 'li' nodes.

- Create a new program (right click on 'Root'). Call it 'Artist' or
  somesuch. This program will turn a 'li' into an 'Artist'.

- Right click on Artist and choose Map. This will run the Artist program
  on each li element.

- Since the Artist program is empty, execution stops immediately, inside the
  map operation. Above Root the message '1 frame' is displayed. This
  indicates that when the Artist sequence finishes, there is a suspended
  operation to return to.

- Click on Record to start recording the Artist program.

- Choose Move -> Enter so we can concentrate on just this element.

- Rename 'li' to 'Artist' and add 'Name' and 'Years' elements.

- Select the 'href' attribute and suck.

- Select the name and yank it. Put it in the Name element.
  Tip: Not all pages have the name in the 'strong' element, but they all
  have the name in the heading.

- Do a text search for '.*\(.*\d\d\d\d/.*\)'. This selects the first text
  node containing a four digit number in brackets. Without the escapes,
  it looks a bit clearer: '*(*DDDD*)'. Note the leading *.
  
- Yank this and put this in the Years element.
  Tip: use Home before clicking on Years so that this will work whereever
  the text was found. If you click directly on Years then it will be
  recorded as 'Up three parent nodes, then back one to Years'.

- Delete the html node.

- Leave.

- Stop recording by clicking on Record a second time. Click on Play to
  continue with the Map.

Dome will no process the rest of the site, until it hits a new error.


Running in a cron job:

The GUI is quite slow. Once your program is working you can use the nogui.py
program to run it without the frontend. The syntax is:

	$ Dome/nogui.py project.dome

This runs the root program in project.dome. When it finishes, the result
is saved back over project.dome and the data is exported as project.xml.

Tip: get your cron job to make backups too!


Replaying:

Rechecking a whole site is slow. The solution is to use the output from the
first scan in future scans. Each page you sucked should have gained an
md5_sum attribute (and maybe a 'last-modified' too).

Eg, you should have output a bit like this:

<Artists uri='index.html' md5_sum='...' last-modified='...'>
	<Artist uri='a001.html' md5_sum='...' last-modified='...'>...
	<Artist uri='a002.html' md5_sum='...' last-modified='...'>...
	...
</Artists>

If you now do a suck on any of these nodes, Dome will check whether the page's
contents have changed. If so, it pulls it in as normal. Otherwise, nothing
happens.

The 'modified' attribute will be added or removed to indicate which happened.
So, you can get your program to first try sucking the Artists node and then
suck each of the 'Artist' ones. If nothing has changed, it will all go very
quickly. To force a re-suck, delete the md5_sum and last-modified attributes.


Problems? Comments? Email <tal00r@ecs.soton.ac.uk>
